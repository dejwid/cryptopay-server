// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userEmail   String?
  description String
  usdCents    Int?
  uploads     String[]  @default([])
  archivedAt  DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Invoice {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  productId             String?   @db.ObjectId
  payeeEmail            String
  title                 String
  payerEmail            String?
  coinCode              String?
  editableCoinCode      Boolean?  @default(false)
  allowedCoins          String[]
  coinAmount10pow10     Int?
  usdAmountCents        Int
  paidAt                DateTime?
  paidToAddressId       String?   @db.ObjectId
  paidByBalanceChangeId String?   @db.ObjectId
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Address {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId          String?   @db.ObjectId
  userEmail          String
  code               String
  address            String    @unique
  privateKey         String?
  lastBalance10pow10 Int?
  balanceUpdatedAt   DateTime?
  busyFrom           DateTime?
  busyTo             DateTime?
  createdAt          DateTime  @default(now())
}

model BalanceChange {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  addressId            String
  address              String
  oldBalance10pow10    Int
  newBalance10pow10    Int
  balanceChange10pow10 Int
  createdAt            DateTime @default(now())
}

model Upload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  location  String
  size      Int?
  createdAt DateTime @default(now())
}

model ProductAccessCode {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  emailedTo   String?
  productId   String    @db.ObjectId
  accessCode  String
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
}

model Settings {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  name      String
  value     String

  @@unique([userEmail, name])
}
